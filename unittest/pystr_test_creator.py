"""pystr_test_creator.py creates pystr_test.cpp.

The main advantage of this way is expected result can be gotten from  actual
Python str-function results.
"""

from collections import OrderedDict

TEST_MAP = OrderedDict((
    ('add()', (
        ("'a'.__add__('a')", 'add("a", "a")'),
        ("'aAa'.__add__('a')", 'add("aAa", "a")'),
        ("'AAA'.__add__('a')", 'add("AAA", "a")'),
        ("'a'.__add__('')", 'add("a", "")'),
        ("''.__add__('a')", 'add("", "a")'),
        ("''.__add__('')", 'add("", "")'),
    )),
    ('contains()', (
        ("'a'.__contains__('a')", 'contains("a", "a")'),
        ("'aAa'.__contains__('a')", 'contains("aAa", "a")'),
        ("'AAA'.__contains__('a')", 'contains("AAA", "a")'),
        ("'a'.__contains__('')", 'contains("a", "")'),
        ("''.__contains__('a')", 'contains("", "a")'),
        ("''.__contains__('')", 'contains("", "")'),
    )),
    ('eq()', (
        ("'a'.__eq__('a')", 'eq("a", "a")'),
        ("'A'.__eq__('a')", 'eq("A", "a")'),
        ("'AAA'.__eq__('a')", 'eq("AAA", "a")'),
        ("'a'.__eq__('')", 'eq("a", "")'),
        ("''.__eq__('a')", 'eq("", "a")'),
        ("''.__eq__('')", 'eq("", "")'),
    )),
    ('ge()', (
        ("'a'.__ge__('a')", 'ge("a", "a")'),
        ("'A'.__ge__('a')", 'ge("A", "a")'),
        ("'a'.__ge__('A')", 'ge("a", "A")'),
        ("'AAA'.__ge__('a')", 'ge("AAA", "a")'),
        ("'a'.__ge__('')", 'ge("a", "")'),
        ("''.__ge__('a')", 'ge("", "a")'),
        ("''.__ge__('')", 'ge("", "")'),
    )),
    ('getitem()', (
        ("'abc'.__getitem__(0)", 'getitem("abc", 0)'),
        ("'abc'.__getitem__(1)", 'getitem("abc", 1)'),
        ("'abc'.__getitem__(2)", 'getitem("abc", 2)'),
        ("'abc'.__getitem__(-3)", 'getitem("abc", -3)'),
        ("'abc'.__getitem__(-2)", 'getitem("abc", -2)'),
        ("'abc'.__getitem__(-1)", 'getitem("abc", -1)'),
        ("'abc'.__getitem__(10)", 'getitem("abc", 10)'),
        ("'abc'.__getitem__(-10)", 'getitem("abc", -10)'),
        ("''.__getitem__(0)", 'getitem("", 0)'),
        ("''.__getitem__(-1)", 'getitem("", -1)'),
    )),
    ('slice()', (
        ("'abcdefgh'.__getitem__(slice(0))",
         'slice("abcdefgh", None, 0)'),
        ("'abcdefgh'.__getitem__(slice(1, 0))",
         'slice("abcdefgh", 1, 0)'),
        ("'abcdefgh'.__getitem__(slice(1, 100))",
         'slice("abcdefgh", 1, 100)'),
        ("'abcdefgh'.__getitem__(slice(100, 1))",
         'slice("abcdefgh", 100, 1)'),
        ("'abcdefgh'.__getitem__(slice(2, 2))",
         'slice("abcdefgh", 2, 2)'),
        ("'abcdefgh'.__getitem__(slice(200, 100))",
         'slice("abcdefgh", 200, 100)'),
        ("'abcdefgh'.__getitem__(slice(1, -1))",
         'slice("abcdefgh", 1, -1)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100))",
         'slice("abcdefgh", -100, 100)'),
        ("'abcdefgh'.__getitem__(slice(1, -100))",
         'slice("abcdefgh", 1, -100)'),
        ("'abcdefgh'.__getitem__(slice(0, None))",
         'slice("abcdefgh", 0, None)'),
        ("'abcdefgh'.__getitem__(slice(None, None))",
         'slice("abcdefgh", None, None)'),
        ("'abcdefgh'.__getitem__(slice(None, None, 0))",
         'slice("abcdefgh", None, None, 0)'),
        ("'abcdefgh'.__getitem__(slice(None, None, 2))",
         'slice("abcdefgh", None, None, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, 0, 2))",
         'slice("abcdefgh", 1, 0, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, 100, 2))",
         'slice("abcdefgh", 1, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(100, 1, 2))",
         'slice("abcdefgh", 100, 1, 2)'),
        ("'abcdefgh'.__getitem__(slice(2, 2, 2))",
         'slice("abcdefgh", 2, 2, 2)'),
        ("'abcdefgh'.__getitem__(slice(200, 100, 2))",
         'slice("abcdefgh", 200, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, -1, 2))",
         'slice("abcdefgh", 1, -1, 2)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100, 2))",
         'slice("abcdefgh", -100, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, -100, 2))",
         'slice("abcdefgh", 1, -100, 2)'),
        ("'abcdefgh'.__getitem__(slice(0, None, 2))",
         'slice("abcdefgh", 0, None, 2)'),
        ("'abcdefgh'.__getitem__(slice(None, None, -1))",
         'slice("abcdefgh", None, None, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, 0, -1))",
         'slice("abcdefgh", 1, 0, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, 100, -1))",
         'slice("abcdefgh", 1, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(100, 1, -1))",
         'slice("abcdefgh", 100, 1, -1)'),
        ("'abcdefgh'.__getitem__(slice(2, 2, -1))",
         'slice("abcdefgh", 2, 2, -1)'),
        ("'abcdefgh'.__getitem__(slice(200, 100, -1))",
         'slice("abcdefgh", 200, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, -1, -1))",
         'slice("abcdefgh", 1, -1, -1)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100, -1))",
         'slice("abcdefgh", -100, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, -100, -1))",
         'slice("abcdefgh", 1, -100, -1)'),
        ("'abcdefgh'.__getitem__(slice(0, None, -1))",
         'slice("abcdefgh", 0, None, -1)'),
        ("'abcdefgh'.__getitem__(slice(None, None, None))",
         'slice("abcdefgh", None, None, None)'),
    )),
    ('gt()', (
        ("'a'.__gt__('a')", 'gt("a", "a")'),
        ("'A'.__gt__('a')", 'gt("A", "a")'),
        ("'a'.__gt__('A')", 'gt("a", "A")'),
        ("'AAA'.__gt__('a')", 'gt("AAA", "a")'),
        ("'a'.__gt__('')", 'gt("a", "")'),
        ("''.__gt__('a')", 'gt("", "a")'),
        ("''.__gt__('')", 'gt("", "")'),
    )),
    ('le()', (
        ("'a'.__le__('a')", 'le("a", "a")'),
        ("'A'.__le__('a')", 'le("A", "a")'),
        ("'a'.__le__('A')", 'le("a", "A")'),
        ("'AAA'.__le__('a')", 'le("AAA", "a")'),
        ("'a'.__le__('')", 'le("a", "")'),
        ("''.__le__('a')", 'le("", "a")'),
        ("''.__le__('')", 'le("", "")'),
    )),
    ('len()', (
        ("'a'.__len__()", 'len("a")'),
        ("'AAA'.__len__()", 'len("AAA")'),
        ("''.__len__()", 'len("")'),
    )),
    ('lt()', (
        ("'a'.__lt__('a')", 'lt("a", "a")'),
        ("'A'.__lt__('a')", 'lt("A", "a")'),
        ("'a'.__lt__('A')", 'lt("a", "A")'),
        ("'AAA'.__lt__('a')", 'lt("AAA", "a")'),
        ("'a'.__lt__('')", 'lt("a", "")'),
        ("''.__lt__('a')", 'lt("", "a")'),
        ("''.__lt__('')", 'lt("", "")'),
    )),
    ('mul()', (
        ("'a'.__mul__(3)", 'mul("a", 3)'),
        ("'abc'.__mul__(3)", 'mul("abc", 3)'),
        ("''.__mul__(10)", 'mul("", 10)'),
        ("'abc'.__mul__(0)", 'mul("abc", 0)'),
        ("'abc'.__mul__(-1)", 'mul("abc", -1)'),
    )),
    ('repr()', (
        ("''.join(chr(i) for i in range(128)).__repr__()", 'repr(str7F(128))'),
        ("'abc\\'abc'.__repr__()", 'repr("abc\'abc")'),
        ("'abc\"\\'abc'.__repr__()", 'repr("abc\\"\'abc")'),
        ("'abc'.__repr__()", 'repr("abc")'),
        ("'\\r\\n\\t'.__repr__()", 'repr("\\r\\n\\t")'),
        ("''.__repr__()", 'repr("")'),
    )),
    ('rmul()', (
        ("'a'.__rmul__(3)", 'rmul("a", 3)'),
        ("'abc'.__rmul__(3)", 'rmul("abc", 3)'),
        ("''.__rmul__(10)", 'rmul("", 10)'),
        ("'abc'.__rmul__(0)", 'rmul("abc", 0)'),
        ("'abc'.__rmul__(-1)", 'rmul("abc", -1)'),
    )),
    ('ne()', (
        ("'a'.__ne__('a')", 'ne("a", "a")'),
        ("'a'.__ne__('AAA')", 'ne("a", "AAA")'),
        ("'AAA'.__ne__('a')", 'ne("AAA", "a")'),
        ("'a'.__ne__('')", 'ne("a", "")'),
        ("''.__ne__('a')", 'ne("", "a")'),
        ("''.__ne__('')", 'ne("", "")'),
    )),
    ('capitalize()', (
        ("'a'.capitalize()", 'capitalize("a")'),
        ("'a abc'.capitalize()", 'capitalize("a abc")'),
        ("'A ABC'.capitalize()", 'capitalize("A ABC")'),
        ("'A Abc'.capitalize()", 'capitalize("A Abc")'),
        ("'abc'.capitalize()", 'capitalize("abc")'),
        ("'ABC'.capitalize()", 'capitalize("ABC")'),
        ("'Abc'.capitalize()", 'capitalize("Abc")'),
        ("'98'.capitalize()", 'capitalize("98")'),
        ("'%$'.capitalize()", 'capitalize("%$")'),
        ("''.capitalize()", 'capitalize("")'),
    )),
    ('casefold()', (
        ("'a'.casefold()", 'casefold("a")'),
        ("'Ab'.casefold()", 'casefold("Ab")'),
        ("'abc'.casefold()", 'casefold("abc")'),
        ("'aBc'.casefold()", 'casefold("aBc")'),
        ("'a c'.casefold()", 'casefold("a c")'),
        ("'3'.casefold()", 'casefold("3")'),
        ("'3F'.casefold()", 'casefold("3F")'),
        ("''.casefold()", 'casefold("")'),
        ("'@'.casefold()", 'casefold("@")'),
        ("' '.casefold()", 'casefold(" ")'),
        ("'3F@'.casefold()", 'casefold("3F@")'),
        ("'\\n'.casefold()", 'casefold("\\n")'),
    )),
    ('center()', (
        ("'a'.center(1)", 'center("a", 1)'),
        ("'a'.center(2)", 'center("a", 2)'),
        ("'a'.center(3)", 'center("a", 3)'),
        ("'a'.center(4)", 'center("a", 4)'),
        ("'aa'.center(2)", 'center("aa", 2)'),
        ("'aa'.center(3)", 'center("aa", 3)'),
        ("'aa'.center(4)", 'center("aa", 4)'),
        ("'aa'.center(5)", 'center("aa", 5)'),
        ("'A A '.center(9)", 'center("A A ", 9)'),
        ("'A A '.center(10)", 'center("A A ", 10)'),
        ("'A A '.center(11)", 'center("A A ", 11)'),
        ("'A A '.center(15)", 'center("A A ", 15)'),
        ("'a'.center(0)", 'center("a", 0)'),
        ("'a'.center(-1)", 'center("a", -1)'),
        ("'a'.center(2, '@')", 'center("a", 2, "@")'),
        ("'abc'.center(10, '@')", 'center("abc", 10, "@")'),
        ("'a'.center(1, '@@')", 'center("a", 1, "@@")'),
        ("'a'.center(1, '')", 'center("a", 1, "")'),
        ("''.center(2)", 'center("", 2)'),
    )),
    ('count()', (
        ("'a'.count('a')", 'count("a", "a")'),
        ("'abc'.count('a')", 'count("abc", "a")'),
        ("'abcab'.count('ab')", 'count("abcab", "ab")'),
        ("''.count('a')", 'count("", "a")'),
        ("'a'.count('')", 'count("a", "")'),
        ("''.count('')", 'count("", "")'),
        ("'abcab'.count('a', 1, 3)", 'count("abcab", "a", 1, 3)'),
        ("'abcab'.count('a', 1, 4)", 'count("abcab", "a", 1, 4)'),
        ("'abcab'.count('ab', 1, 3)", 'count("abcab", "ab", 1, 3)'),
        ("'abcab'.count('ab', 1, 4)", 'count("abcab", "ab", 1, 4)'),
        ("'abcab'.count('a', 1)", 'count("abcab", "a", 1)'),
        ("'abcab'.count('a', 4)", 'count("abcab", "a", 4)'),
        ("'abcab'.count('', 1, 3)", 'count("abcab", "", 1, 3)'),
        ("'abcab'.count('ab', 999)", 'count("abcab", "ab", 999)'),
        ("'abcab'.count('ab', 1, 999)", 'count("abcab", "ab", 1, 999)'),
    )),
    ('endswith() with single suffix', (
        ("'a'.endswith('a')", 'endswith("a", "a")'),
        ("'abc'.endswith('a')", 'endswith("abc", "a")'),
        ("'abc'.endswith('c')", 'endswith("abc", "c")'),
        ("'abcab'.endswith('ab')", 'endswith("abcab", "ab")'),
        ("'abcab'.endswith('ac')", 'endswith("abcab", "ac")'),
        ("''.endswith('a')", 'endswith("", "a")'),
        ("'a'.endswith('')", 'endswith("a", "")'),
        ("''.endswith('')", 'endswith("", "")'),
        ("'abcab'.endswith('a', 1, 3)", 'endswith("abcab", "a", 1, 3)'),
        ("'abcab'.endswith('a', 1, 4)", 'endswith("abcab", "a", 1, 4)'),
        ("'abcab'.endswith('ab', 1, 3)", 'endswith("abcab", "ab", 1, 3)'),
        ("'abcab'.endswith('ab', 1, 4)", 'endswith("abcab", "ab", 1, 4)'),
        ("'abcab'.endswith('a', 1)", 'endswith("abcab", "a", 1)'),
        ("'abcab'.endswith('a', 4)", 'endswith("abcab", "a", 4)'),
        ("'abcab'.endswith('', 1, 3)", 'endswith("abcab", "", 1, 3)'),
        ("'abcab'.endswith('ab', 999)", 'endswith("abcab", "ab", 999)'),
    )),
    ('endswith() with multiple suffixes', (
        ("'abc'.endswith(('a', 'b', 'c'))",
         'endswith("abc", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'acb'.endswith(('a', 'b', 'c'))",
         'endswith("acb", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'ddd'.endswith(('a', 'b', 'c'))",
         'endswith("ddd", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'abc'.endswith(('ab', 'bc'))",
         'endswith("abc", (std::vector<std::string>{"ab", "bc"}))'),
        ("'acb'.endswith(('ab', 'bc'))",
         'endswith("acb", (std::vector<std::string>{"ab", "bc"}))'),
        ("'abc'.endswith(tuple())",
         'endswith("abc", (std::vector<std::string>{}))'),
    )),
    ('expandtabs()', (
        ("'a'.expandtabs()", 'expandtabs("a")'),
        ("'a\t'.expandtabs()", 'expandtabs("a\\t")'),
        ("'\ta'.expandtabs()", 'expandtabs("\\ta")'),
        ("'\ta\t'.expandtabs()", 'expandtabs("\\ta\\t")'),
        ("'\t\t\t'.expandtabs()", 'expandtabs("\\t\\t\\t")'),
        ("'\ta  a\t'.expandtabs()", 'expandtabs("\\ta  a\\t")'),
        ("'\ta\\na\t'.expandtabs()", 'expandtabs("\\ta\\na\\t")'),
        ("'a'.expandtabs(4)", 'expandtabs("a", 4)'),
        ("'a\t'.expandtabs(4)", 'expandtabs("a\\t", 4)'),
        ("'\ta'.expandtabs(4)", 'expandtabs("\\ta", 4)'),
        ("'\ta\t'.expandtabs(4)", 'expandtabs("\\ta\\t", 4)'),
        ("'\t\t\t'.expandtabs(4)", 'expandtabs("\\t\\t\\t", 4)'),
        ("'\ta  a\t'.expandtabs(4)", 'expandtabs("\\ta  a\\t", 4)'),
        ("'\ta\\na\t'.expandtabs(4)", 'expandtabs("\\ta\\na\\t", 4)'),
        ("'a\t'.expandtabs(1)", 'expandtabs("a\\t", 1)'),
        ("'a\t'.expandtabs(0)", 'expandtabs("a\\t", 0)'),
        ("'a\t'.expandtabs(-1)", 'expandtabs("a\\t", -1)'),
        ("''.expandtabs()", 'expandtabs("")'),
    )),
    ('find()', (
        ("'abc'.find('a')", 'find("abc", "a")'),
        ("'abc'.find('d')", 'find("abc", "d")'),
        ("'abc'.find('bc')", 'find("abc", "bc")'),
        ("'abc'.find('ac')", 'find("abc", "ac")'),
        ("'abcabc'.find('abc')", 'find("abcabc", "abc")'),
        ("'abcab'.find('a', 1, 3)", 'find("abcab", "a", 1, 3)'),
        ("'abcab'.find('a', 1, 4)", 'find("abcab", "a", 1, 4)'),
        ("'abcab'.find('ab', 1, 3)", 'find("abcab", "ab", 1, 3)'),
        ("'abcab'.find('ab', 1, 4)", 'find("abcab", "ab", 1, 4)'),
        ("'abcab'.find('a', 1)", 'find("abcab", "a", 1)'),
        ("'abcab'.find('a', 4)", 'find("abcab", "a", 4)'),
        ("'abcab'.find('', 1, 3)", 'find("abcab", "", 1, 3)'),
        ("'abcab'.find('ab', 999)", 'find("abcab", "ab", 999)'),
        ("'abcab'.find('ab', 1, 999)", 'find("abcab", "ab", 1, 999)'),
        ("''.find('a')", 'find("", "a")'),
        ("'a'.find('')", 'find("a", "")'),
        ("''.find('')", 'find("", "")'),
    )),
    ('index()', (
        ("'abc'.index('a')", 'index("abc", "a")'),
        ("'abc'.index('d')", 'index("abc", "d")'),
        ("'abc'.index('bc')", 'index("abc", "bc")'),
        ("'abc'.index('ac')", 'index("abc", "ac")'),
        ("'abcabc'.index('abc')", 'index("abcabc", "abc")'),
        ("'abcab'.index('a', 1, 3)", 'index("abcab", "a", 1, 3)'),
        ("'abcab'.index('a', 1, 4)", 'index("abcab", "a", 1, 4)'),
        ("'abcab'.index('ab', 1, 3)", 'index("abcab", "ab", 1, 3)'),
        ("'abcab'.index('ab', 1, 4)", 'index("abcab", "ab", 1, 4)'),
        ("'abcab'.index('a', 1)", 'index("abcab", "a", 1)'),
        ("'abcab'.index('a', 4)", 'index("abcab", "a", 4)'),
        ("'abcab'.index('', 1, 3)", 'index("abcab", "", 1, 3)'),
        ("'abcab'.index('ab', 999)", 'index("abcab", "ab", 999)'),
        ("'abcab'.index('ab', 1, 999)", 'index("abcab", "ab", 1, 999)'),
        ("''.index('a')", 'index("", "a")'),
        ("'a'.index('')", 'index("a", "")'),
        ("''.index('')", 'index("", "")'),
    )),
    ('isalnum()', (
        ("'a'.isalnum()", 'isalnum("a")'),
        ("'A'.isalnum()", 'isalnum("A")'),
        ("'abc'.isalnum()", 'isalnum("abc")'),
        ("'aBc'.isalnum()", 'isalnum("aBc")'),
        ("'a c'.isalnum()", 'isalnum("a c")'),
        ("'3'.isalnum()", 'isalnum("3")'),
        ("'3F'.isalnum()", 'isalnum("3F")'),
        ("''.isalnum()", 'isalnum("")'),
        ("'@'.isalnum()", 'isalnum("@")'),
        ("' '.isalnum()", 'isalnum(" ")'),
        ("'3F@'.isalnum()", 'isalnum("3F@")'),
        ("'\\n'.isalnum()", 'isalnum("\\n")'),
    )),
    ('isalpha()', (
        ("'a'.isalpha()", 'isalpha("a")'),
        ("'A'.isalpha()", 'isalpha("A")'),
        ("'abc'.isalpha()", 'isalpha("abc")'),
        ("'aBc'.isalpha()", 'isalpha("aBc")'),
        ("'a c'.isalpha()", 'isalpha("a c")'),
        ("'3'.isalpha()", 'isalpha("3")'),
        ("'3F'.isalpha()", 'isalpha("3F")'),
        ("''.isalpha()", 'isalpha("")'),
        ("'@'.isalpha()", 'isalpha("@")'),
        ("' '.isalpha()", 'isalpha(" ")'),
        ("'3F@'.isalpha()", 'isalpha("3F@")'),
        ("'\\n'.isalpha()", 'isalpha("\\n")'),
    )),
    ('isascii()', (
        ("'a'.isascii()", 'isascii("a")'),
        ("'A'.isascii()", 'isascii("A")'),
        ("'abc'.isascii()", 'isascii("abc")'),
        ("'aBc'.isascii()", 'isascii("aBc")'),
        ("'a c'.isascii()", 'isascii("a c")'),
        ("'3'.isascii()", 'isascii("3")'),
        ("'3F'.isascii()", 'isascii("3F")'),
        ("''.isascii()", 'isascii("")'),
        ("'@'.isascii()", 'isascii("@")'),
        ("' '.isascii()", 'isascii(" ")'),
        ("'3F@'.isascii()", 'isascii("3F@")'),
        ("'\\n'.isascii()", 'isascii("\\n")'),
    )),
    ('isdecimal()', (
        ("'a'.isdecimal()", 'isdecimal("a")'),
        ("'A'.isdecimal()", 'isdecimal("A")'),
        ("'abc'.isdecimal()", 'isdecimal("abc")'),
        ("'aBc'.isdecimal()", 'isdecimal("aBc")'),
        ("'a c'.isdecimal()", 'isdecimal("a c")'),
        ("'3'.isdecimal()", 'isdecimal("3")'),
        ("'3F'.isdecimal()", 'isdecimal("3F")'),
        ("''.isdecimal()", 'isdecimal("")'),
        ("'@'.isdecimal()", 'isdecimal("@")'),
        ("' '.isdecimal()", 'isdecimal(" ")'),
        ("'3F@'.isdecimal()", 'isdecimal("3F@")'),
        ("'\\n'.isdecimal()", 'isdecimal("\\n")'),
    )),
    ('isdigit()', (
        ("'a'.isdigit()", 'isdigit("a")'),
        ("'A'.isdigit()", 'isdigit("A")'),
        ("'abc'.isdigit()", 'isdigit("abc")'),
        ("'aBc'.isdigit()", 'isdigit("aBc")'),
        ("'a c'.isdigit()", 'isdigit("a c")'),
        ("'3'.isdigit()", 'isdigit("3")'),
        ("'3F'.isdigit()", 'isdigit("3F")'),
        ("''.isdigit()", 'isdigit("")'),
        ("'@'.isdigit()", 'isdigit("@")'),
        ("' '.isdigit()", 'isdigit(" ")'),
        ("'3F@'.isdigit()", 'isdigit("3F@")'),
        ("'\\n'.isdigit()", 'isdigit("\\n")'),
    )),
    ('islower()', (
        ("'a'.islower()", 'islower("a")'),
        ("'A'.islower()", 'islower("A")'),
        ("'abc'.islower()", 'islower("abc")'),
        ("'aBc'.islower()", 'islower("aBc")'),
        ("'a c'.islower()", 'islower("a c")'),
        ("'3'.islower()", 'islower("3")'),
        ("'3F'.islower()", 'islower("3F")'),
        ("''.islower()", 'islower("")'),
        ("'@'.islower()", 'islower("@")'),
        ("' '.islower()", 'islower(" ")'),
        ("'3F@'.islower()", 'islower("3F@")'),
        ("'\\n'.islower()", 'islower("\\n")'),
    )),
    ('isnumeric()', (
        ("'a'.isnumeric()", 'isnumeric("a")'),
        ("'A'.isnumeric()", 'isnumeric("A")'),
        ("'abc'.isnumeric()", 'isnumeric("abc")'),
        ("'aBc'.isnumeric()", 'isnumeric("aBc")'),
        ("'a c'.isnumeric()", 'isnumeric("a c")'),
        ("'3'.isnumeric()", 'isnumeric("3")'),
        ("'3F'.isnumeric()", 'isnumeric("3F")'),
        ("''.isnumeric()", 'isnumeric("")'),
        ("'@'.isnumeric()", 'isnumeric("@")'),
        ("' '.isnumeric()", 'isnumeric(" ")'),
        ("'3F@'.isnumeric()", 'isnumeric("3F@")'),
        ("'\\n'.isnumeric()", 'isnumeric("\\n")'),
    )),
    ('isprintable()', (
        ("'a'.isprintable()", 'isprintable("a")'),
        ("'A'.isprintable()", 'isprintable("A")'),
        ("'abc'.isprintable()", 'isprintable("abc")'),
        ("'aBc'.isprintable()", 'isprintable("aBc")'),
        ("'a c'.isprintable()", 'isprintable("a c")'),
        ("'3'.isprintable()", 'isprintable("3")'),
        ("'3F'.isprintable()", 'isprintable("3F")'),
        ("''.isprintable()", 'isprintable("")'),
        ("'@'.isprintable()", 'isprintable("@")'),
        ("' '.isprintable()", 'isprintable(" ")'),
        ("'3F@'.isprintable()", 'isprintable("3F@")'),
        ("'\\n'.isprintable()", 'isprintable("\\n")'),
    )),
    ('isspace()', (
        ("'a'.isspace()", 'isspace("a")'),
        ("'A'.isspace()", 'isspace("A")'),
        ("'abc'.isspace()", 'isspace("abc")'),
        ("'aBc'.isspace()", 'isspace("aBc")'),
        ("'a c'.isspace()", 'isspace("a c")'),
        ("'3'.isspace()", 'isspace("3")'),
        ("'3F'.isspace()", 'isspace("3F")'),
        ("''.isspace()", 'isspace("")'),
        ("'@'.isspace()", 'isspace("@")'),
        ("' '.isspace()", 'isspace(" ")'),
        ("'3F@'.isspace()", 'isspace("3F@")'),
        ("'\\n'.isspace()", 'isspace("\\n")'),
    )),
    ('istitle()', (
        ("'a'.istitle()", 'istitle("a")'),
        ("'aaa'.istitle()", 'istitle("aaa")'),
        ("'aAa'.istitle()", 'istitle("aAa")'),
        ("'Aaa'.istitle()", 'istitle("Aaa")'),
        ("'aAa AAA aaA'.istitle()", 'istitle("aAa AAA aaA")'),
        ("'AAa AAA AaA'.istitle()", 'istitle("AAa AAA AaA")'),
        ("'Aaa Bbb Ccc'.istitle()", 'istitle("Aaa Bbb Ccc")'),
        ("'aAa\\naaA'.istitle()", 'istitle("aAa\\naaA")'),
        ("'aAa0aaA'.istitle()", 'istitle("aAa0aaA")'),
        ("'aAa-aaA'.istitle()", 'istitle("aAa-aaA")'),
        ("'aAa/aaA'.istitle()", 'istitle("aAa/aaA")'),
        ("'aAa\\'aaA'.istitle()", 'istitle("aAa\'aaA")'),
        ("'AAa-AaA'.istitle()", 'istitle("AAa-AaA")'),
        ("'Aaa-Abc'.istitle()", 'istitle("Aaa-Abc")'),
        ("' aA a '.istitle()", 'istitle(" aA a ")'),
        ("''.istitle()", 'istitle("")'),
    )),
    ('isupper()', (
        ("'a'.isupper()", 'isupper("a")'),
        ("'A'.isupper()", 'isupper("A")'),
        ("'abc'.isupper()", 'isupper("abc")'),
        ("'aBc'.isupper()", 'isupper("aBc")'),
        ("'a c'.isupper()", 'isupper("a c")'),
        ("'3'.isupper()", 'isupper("3")'),
        ("'3F'.isupper()", 'isupper("3F")'),
        ("''.isupper()", 'isupper("")'),
        ("'@'.isupper()", 'isupper("@")'),
        ("' '.isupper()", 'isupper(" ")'),
        ("'3F@'.isupper()", 'isupper("3F@")'),
        ("'\\n'.isupper()", 'isupper("\\n")'),
    )),
    ('join()', (
        ("''.join([])", 'join("", (std::vector<std::string>{}))'),
        ("'a'.join([])", 'join("a", (std::vector<std::string>{}))'),
        ("''.join(['a', 'b', 'c'])",
         'join("", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'a'.join(['a', 'b', 'c'])",
         'join("a", (std::vector<std::string>{"a", "b", "c"}))'),
        ("''.join(['ab', 'bc'])",
         'join("", (std::vector<std::string>{"ab", "bc"}))'),
        ("'a'.join(['ab', 'bc'])",
         'join("a", (std::vector<std::string>{"ab", "bc"}))'),
    )),
    ('ljust()', (
        ("'a'.ljust(1)", 'ljust("a", 1)'),
        ("'a'.ljust(2)", 'ljust("a", 2)'),
        ("'a'.ljust(3)", 'ljust("a", 3)'),
        ("'a'.ljust(4)", 'ljust("a", 4)'),
        ("'aa'.ljust(2)", 'ljust("aa", 2)'),
        ("'aa'.ljust(3)", 'ljust("aa", 3)'),
        ("'aa'.ljust(4)", 'ljust("aa", 4)'),
        ("'aa'.ljust(5)", 'ljust("aa", 5)'),
        ("'A A '.ljust(9)", 'ljust("A A ", 9)'),
        ("'A A '.ljust(10)", 'ljust("A A ", 10)'),
        ("'A A '.ljust(11)", 'ljust("A A ", 11)'),
        ("'A A '.ljust(15)", 'ljust("A A ", 15)'),
        ("'a'.ljust(0)", 'ljust("a", 0)'),
        ("'a'.ljust(-1)", 'ljust("a", -1)'),
        ("'a'.ljust(2, '@')", 'ljust("a", 2, "@")'),
        ("'abc'.ljust(10, '@')", 'ljust("abc", 10, "@")'),
        ("'a'.ljust(1, '@@')", 'ljust("a", 1, "@@")'),
        ("'a'.ljust(1, '')", 'ljust("a", 1, "")'),
        ("''.ljust(0)", 'ljust("", 0)'),
        ("''.ljust(1)", 'ljust("", 1)'),
        ("''.ljust(2)", 'ljust("", 2)'),
    )),
    ('lower()', (
        ("'a'.lower()", 'lower("a")'),
        ("'Ab'.lower()", 'lower("Ab")'),
        ("'abc'.lower()", 'lower("abc")'),
        ("'aBc'.lower()", 'lower("aBc")'),
        ("'a c'.lower()", 'lower("a c")'),
        ("'3'.lower()", 'lower("3")'),
        ("'3F'.lower()", 'lower("3F")'),
        ("''.lower()", 'lower("")'),
        ("'@'.lower()", 'lower("@")'),
        ("' '.lower()", 'lower(" ")'),
        ("'3F@'.lower()", 'lower("3F@")'),
        ("'\\n'.lower()", 'lower("\\n")'),
    )),
    ('lstrip()', (
        ("'ab ab '.lstrip('a')", 'lstrip("ab ab ", "a")'),
        ("'ab ab '.lstrip('ab')", 'lstrip("ab ab ", "ab")'),
        ("'ab ab '.lstrip('ba')", 'lstrip("ab ab ", "ba")'),
        ("' ab ab'.lstrip('a')", 'lstrip(" ab ab", "a")'),
        ("' ab ab'.lstrip('ab')", 'lstrip(" ab ab", "ab")'),
        ("' ab ab'.lstrip('ba')", 'lstrip(" ab ab", "ba")'),
        ("' ab ab '.lstrip()", 'lstrip(" ab ab ")'),
        ("' ab ab '.lstrip(' ')", 'lstrip(" ab ab ", " ")'),
        ("' ab ab '.lstrip('')", 'lstrip(" ab ab ", "")'),
        ("''.lstrip('a')", 'lstrip("", "a")'),
        ("'a'.lstrip('')", 'lstrip("a", "")'),
        ("''.lstrip('')", 'lstrip("", "")'),
    )),
    ('partition()', (
        ("'abc'.partition('a')", 'partition("abc", "a")'),
        ("'abc'.partition('b')", 'partition("abc", "b")'),
        ("'abc'.partition('c')", 'partition("abc", "c")'),
        ("'abc'.partition('d')", 'partition("abc", "d")'),
        ("'ab ab '.partition('a')", 'partition("ab ab ", "a")'),
        ("'ab ab '.partition('b')", 'partition("ab ab ", "b")'),
        ("'ab ab '.partition('ab')", 'partition("ab ab ", "ab")'),
        ("'ab ab '.partition('ba')", 'partition("ab ab ", "ba")'),
        ("'ab ab '.partition('b a')", 'partition("ab ab ", "b a")'),
        ("' ab ab '.partition(' ')", 'partition(" ab ab ", " ")'),
        ("' ab ab '.partition('')", 'partition(" ab ab ", "")'),
        ("''.partition('a')", 'partition("", "a")'),
        ("''.partition('')", 'partition("", "")'),
    )),
    ('replace()', (
        ("'abc'.replace('b', 'a')", 'replace("abc", "b", "a")'),
        ("'abc'.replace('d', 'a')", 'replace("abc", "d", "a")'),
        ("'abc'.replace('bc', 'dd')", 'replace("abc", "bc", "dd")'),
        ("'abc'.replace('cb', 'dd')", 'replace("abc", "cb", "dd")'),
        ("'abc'.replace('bc', 'd')", 'replace("abc", "bc", "d")'),
        ("'abc'.replace('cb', 'd')", 'replace("abc", "cb", "d")'),
        ("'abc'.replace('', 'a')", 'replace("abc", "", "a")'),
        ("'abc'.replace('b', '')", 'replace("abc", "b", "")'),
        ("'abc'.replace('', '')", 'replace("abc", "", "")'),
        ("''.replace('', 'a')", 'replace("", "", "a")'),
        ("''.replace('b', '')", 'replace("", "b", "")'),
        ("''.replace('', '')", 'replace("", "", "")'),
        ("'abcabcabc'.replace('bc', 'dd', 4)",
         'replace("abcabcabc", "bc", "dd", 4)'),
        ("'abcabcabc'.replace('bc', 'dd', 3)",
         'replace("abcabcabc", "bc", "dd", 3)'),
        ("'abcabcabc'.replace('bc', 'dd', 2)",
         'replace("abcabcabc", "bc", "dd", 2)'),
        ("'abcabcabc'.replace('bc', 'dd', 1)",
         'replace("abcabcabc", "bc", "dd", 1)'),
        ("'abcabcabc'.replace('bc', 'dd', 0)",
         'replace("abcabcabc", "bc", "dd", 0)'),
        ("'abcabcabc'.replace('bc', 'dd', -1)",
         'replace("abcabcabc", "bc", "dd", -1)'),
        ("'abcabcabc'.replace('bc', 'dd', -2)",
         'replace("abcabcabc", "bc", "dd", -2)'),
    )),
    ('rfind()', (
        ("'abc'.rfind('a')", 'rfind("abc", "a")'),
        ("'abc'.rfind('d')", 'rfind("abc", "d")'),
        ("'abc'.rfind('bc')", 'rfind("abc", "bc")'),
        ("'abc'.rfind('ac')", 'rfind("abc", "ac")'),
        ("'abcabc'.rfind('abc')", 'rfind("abcabc", "abc")'),
        ("'abcab'.rfind('a', 1, 3)", 'rfind("abcab", "a", 1, 3)'),
        ("'abcab'.rfind('a', 1, 4)", 'rfind("abcab", "a", 1, 4)'),
        ("'abcab'.rfind('ab', 1, 3)", 'rfind("abcab", "ab", 1, 3)'),
        ("'abcab'.rfind('ab', 1, 4)", 'rfind("abcab", "ab", 1, 4)'),
        ("'abcab'.rfind('a', 1)", 'rfind("abcab", "a", 1)'),
        ("'abcab'.rfind('a', 4)", 'rfind("abcab", "a", 4)'),
        ("'abcab'.rfind('', 1, 3)", 'rfind("abcab", "", 1, 3)'),
        ("'abcab'.rfind('ab', 999)", 'rfind("abcab", "ab", 999)'),
        ("'abcab'.rfind('ab', 1, 999)", 'rfind("abcab", "ab", 1, 999)'),
        ("''.rfind('a')", 'rfind("", "a")'),
        ("'a'.rfind('')", 'rfind("a", "")'),
        ("''.rfind('')", 'rfind("", "")'),
    )),
    ('rindex()', (
        ("'abc'.rindex('a')", 'rindex("abc", "a")'),
        ("'abc'.rindex('d')", 'rindex("abc", "d")'),
        ("'abc'.rindex('bc')", 'rindex("abc", "bc")'),
        ("'abc'.rindex('ac')", 'rindex("abc", "ac")'),
        ("'abcabc'.rindex('abc')", 'rindex("abcabc", "abc")'),
        ("'abcab'.rindex('a', 1, 3)", 'rindex("abcab", "a", 1, 3)'),
        ("'abcab'.rindex('a', 1, 4)", 'rindex("abcab", "a", 1, 4)'),
        ("'abcab'.rindex('ab', 1, 3)", 'rindex("abcab", "ab", 1, 3)'),
        ("'abcab'.rindex('ab', 1, 4)", 'rindex("abcab", "ab", 1, 4)'),
        ("'abcab'.rindex('a', 1)", 'rindex("abcab", "a", 1)'),
        ("'abcab'.rindex('a', 4)", 'rindex("abcab", "a", 4)'),
        ("'abcab'.rindex('', 1, 3)", 'rindex("abcab", "", 1, 3)'),
        ("'abcab'.rindex('ab', 999)", 'rindex("abcab", "ab", 999)'),
        ("'abcab'.rindex('ab', 1, 999)", 'rindex("abcab", "ab", 1, 999)'),
        ("''.rindex('a')", 'rindex("", "a")'),
        ("'a'.rindex('')", 'rindex("a", "")'),
        ("''.rindex('')", 'rindex("", "")'),
    )),
    ('rjust()', (
        ("'a'.rjust(1)", 'rjust("a", 1)'),
        ("'a'.rjust(2)", 'rjust("a", 2)'),
        ("'a'.rjust(3)", 'rjust("a", 3)'),
        ("'a'.rjust(4)", 'rjust("a", 4)'),
        ("'aa'.rjust(2)", 'rjust("aa", 2)'),
        ("'aa'.rjust(3)", 'rjust("aa", 3)'),
        ("'aa'.rjust(4)", 'rjust("aa", 4)'),
        ("'aa'.rjust(5)", 'rjust("aa", 5)'),
        ("'A A '.rjust(9)", 'rjust("A A ", 9)'),
        ("'A A '.rjust(10)", 'rjust("A A ", 10)'),
        ("'A A '.rjust(11)", 'rjust("A A ", 11)'),
        ("'A A '.rjust(15)", 'rjust("A A ", 15)'),
        ("'a'.rjust(0)", 'rjust("a", 0)'),
        ("'a'.rjust(-1)", 'rjust("a", -1)'),
        ("'a'.rjust(2, '@')", 'rjust("a", 2, "@")'),
        ("'abc'.rjust(10, '@')", 'rjust("abc", 10, "@")'),
        ("'a'.rjust(1, '@@')", 'rjust("a", 1, "@@")'),
        ("'a'.rjust(1, '')", 'rjust("a", 1, "")'),
        ("''.rjust(0)", 'rjust("", 0)'),
        ("''.rjust(1)", 'rjust("", 1)'),
        ("''.rjust(2)", 'rjust("", 2)'),
    )),
    ('rpartition()', (
        ("'abc'.rpartition('a')", 'rpartition("abc", "a")'),
        ("'abc'.rpartition('b')", 'rpartition("abc", "b")'),
        ("'abc'.rpartition('c')", 'rpartition("abc", "c")'),
        ("'abc'.rpartition('d')", 'rpartition("abc", "d")'),
        ("'ab ab '.rpartition('a')", 'rpartition("ab ab ", "a")'),
        ("'ab ab '.rpartition('b')", 'rpartition("ab ab ", "b")'),
        ("'ab ab '.rpartition('ab')", 'rpartition("ab ab ", "ab")'),
        ("'ab ab '.rpartition('ba')", 'rpartition("ab ab ", "ba")'),
        ("'ab ab '.rpartition('b a')", 'rpartition("ab ab ", "b a")'),
        ("' ab ab '.rpartition(' ')", 'rpartition(" ab ab ", " ")'),
        ("' ab ab '.rpartition('')", 'rpartition(" ab ab ", "")'),
        ("'a'.rpartition('')", 'rpartition("a", "")'),
        ("''.rpartition('a')", 'rpartition("", "a")'),
        ("''.rpartition('')", 'rpartition("", "")'),
    )),
    ('rsplit() with sep', (
        ("'abc'.rsplit('a')", 'rsplit("abc", "a")'),
        ("'abc'.rsplit('b')", 'rsplit("abc", "b")'),
        ("'abc'.rsplit('c')", 'rsplit("abc", "c")'),
        ("'abc'.rsplit('d')", 'rsplit("abc", "d")'),
        ("'ab ab '.rsplit('a')", 'rsplit("ab ab ", "a")'),
        ("'ab ab '.rsplit('b')", 'rsplit("ab ab ", "b")'),
        ("'ab ab '.rsplit('ab')", 'rsplit("ab ab ", "ab")'),
        ("'ab ab '.rsplit('ba')", 'rsplit("ab ab ", "ba")'),
        ("'ab ab '.rsplit('b a')", 'rsplit("ab ab ", "b a")'),
        ("'aabb  aabb  '.rsplit('a')", 'rsplit("aabb  aabb  ", "a")'),
        ("'aabb  aabb  '.rsplit('b')", 'rsplit("aabb  aabb  ", "b")'),
        ("'aabb  aabb  '.rsplit(' ')", 'rsplit("aabb  aabb  ", " ")'),
        ("'aabb  aabb  '.rsplit('b  a')", 'rsplit("aabb  aabb  ", "b  a")'),
        ("' ab ab '.rsplit(' ')", 'rsplit(" ab ab ", " ")'),
        ("' ab ab '.rsplit('')", 'rsplit(" ab ab ", "")'),
        ("'a'.rsplit('')", 'rsplit("a", "")'),
        ("''.rsplit('a')", 'rsplit("", "a")'),
        ("''.rsplit('')", 'rsplit("", "")'),
        ("'abc'.rsplit('a', 1)", 'rsplit("abc", "a", 1)'),
        ("'abc'.rsplit('b', 1)", 'rsplit("abc", "b", 1)'),
        ("'abc'.rsplit('c', 1)", 'rsplit("abc", "c", 1)'),
        ("'abc'.rsplit('d', 1)", 'rsplit("abc", "d", 1)'),
        ("'ab ab '.rsplit('a', 1)", 'rsplit("ab ab ", "a", 1)'),
        ("'ab ab '.rsplit('b', 1)", 'rsplit("ab ab ", "b", 1)'),
        ("'ab ab '.rsplit('ab', 1)", 'rsplit("ab ab ", "ab", 1)'),
        ("'ab ab '.rsplit('ba', 1)", 'rsplit("ab ab ", "ba", 1)'),
        ("'ab ab '.rsplit('b a', 1)", 'rsplit("ab ab ", "b a", 1)'),
        ("'aabb  aabb  '.rsplit('a', 1)", 'rsplit("aabb  aabb  ", "a", 1)'),
        ("'aabb  aabb  '.rsplit('b', 1)", 'rsplit("aabb  aabb  ", "b", 1)'),
        ("'aabb  aabb  '.rsplit(' ', 1)", 'rsplit("aabb  aabb  ", " ", 1)'),
        ("'aabb  aabb  '.rsplit('b  a', 1)",
         'rsplit("aabb  aabb  ", "b  a", 1)'),
        ("' ab ab '.rsplit(' ', 1)", 'rsplit(" ab ab ", " ", 1)'),
        ("' ab ab '.rsplit('', 1)", 'rsplit(" ab ab ", "", 1)'),
        ("'a'.rsplit('', 1)", 'rsplit("a", "", 1)'),
        ("''.rsplit('a', 1)", 'rsplit("", "a", 1)'),
        ("''.rsplit('', 1)", 'rsplit("", "", 1)'),
        ("'abc'.rsplit('a', 2)", 'rsplit("abc", "a", 2)'),
        ("'abc'.rsplit('b', 2)", 'rsplit("abc", "b", 2)'),
        ("'abc'.rsplit('c', 2)", 'rsplit("abc", "c", 2)'),
        ("'abc'.rsplit('d', 2)", 'rsplit("abc", "d", 2)'),
        ("'ab ab '.rsplit('a', 2)", 'rsplit("ab ab ", "a", 2)'),
        ("'ab ab '.rsplit('b', 2)", 'rsplit("ab ab ", "b", 2)'),
        ("'ab ab '.rsplit('ab', 2)", 'rsplit("ab ab ", "ab", 2)'),
        ("'ab ab '.rsplit('ba', 2)", 'rsplit("ab ab ", "ba", 2)'),
        ("'ab ab '.rsplit('b a', 2)", 'rsplit("ab ab ", "b a", 2)'),
        ("'aabb  aabb  '.rsplit('a', 2)", 'rsplit("aabb  aabb  ", "a", 2)'),
        ("'aabb  aabb  '.rsplit('b', 2)", 'rsplit("aabb  aabb  ", "b", 2)'),
        ("'aabb  aabb  '.rsplit(' ', 2)", 'rsplit("aabb  aabb  ", " ", 2)'),
        ("'aabb  aabb  '.rsplit('b  a', 2)",
         'rsplit("aabb  aabb  ", "b  a", 2)'),
        ("' ab ab '.rsplit(' ', 2)", 'rsplit(" ab ab ", " ", 2)'),
        ("' ab ab '.rsplit('', 2)", 'rsplit(" ab ab ", "", 2)'),
        ("'a'.rsplit('', 2)", 'rsplit("a", "", 2)'),
        ("''.rsplit('a', 2)", 'rsplit("", "a", 2)'),
        ("''.rsplit('', 2)", 'rsplit("", "", 2)'),
        ("'abc'.rsplit('b', 10)", 'rsplit("abc", "b", 10)'),
        ("'abc'.rsplit('b', 0)", 'rsplit("abc", "b", 0)'),
        ("'abc'.rsplit('b', -1)", 'rsplit("abc", "b", -1)'),
        ("'abc'.rsplit('b', -10000)", 'rsplit("abc", "b", -10000)'),
    )),
    ('rsplit() without sep', (
        ("'abc'.rsplit()", 'rsplit("abc")'),
        ("'ab ab '.rsplit()", 'rsplit("ab ab ")'),
        ("'aabb  aabb  '.rsplit()", 'rsplit("aabb  aabb  ")'),
        ("' ab ab '.rsplit()", 'rsplit(" ab ab ")'),
        ("'a'.rsplit()", 'rsplit("a")'),
        ("''.rsplit()", 'rsplit("")'),
        ("'abc'.rsplit(None, 1)", 'rsplit("abc", 1)'),
        ("'ab ab '.rsplit(None, 1)", 'rsplit("ab ab ", 1)'),
        ("'aabb  aabb  '.rsplit(None, 1)", 'rsplit("aabb  aabb  ", 1)'),
        ("' ab ab '.rsplit(None, 1)", 'rsplit(" ab ab ", 1)'),
        ("'a'.rsplit(None, 1)", 'rsplit("a", 1)'),
        ("''.rsplit(None, 1)", 'rsplit("", 1)'),
        ("'abc'.rsplit(None, 2)", 'rsplit("abc", 2)'),
        ("'ab ab '.rsplit(None, 2)", 'rsplit("ab ab ", 2)'),
        ("'aabb  aabb  '.rsplit(None, 2)", 'rsplit("aabb  aabb  ", 2)'),
        ("' ab ab '.rsplit(None, 2)", 'rsplit(" ab ab ", 2)'),
        ("'a'.rsplit(None, 2)", 'rsplit("a", 2)'),
        ("''.rsplit(None, 2)", 'rsplit("", 2)'),
        ("'abc'.rsplit(None, 10)", 'rsplit("abc", 10)'),
        ("'abc'.rsplit(None, 0)", 'rsplit("abc", 0)'),
        ("'abc'.rsplit(None, -1)", 'rsplit("abc", -1)'),
        ("'abc'.rsplit(None, -10000)", 'rsplit("abc", -10000)'),
    )),
    ('rstrip()', (
        ("'ab ab'.rstrip('a')", 'rstrip("ab ab", "a")'),
        ("'ab ab'.rstrip('ab')", 'rstrip("ab ab", "ab")'),
        ("'ab ab'.rstrip('ba')", 'rstrip("ab ab", "ba")'),
        ("' ab ab '.rstrip('a')", 'rstrip(" ab ab ", "a")'),
        ("' ab ab '.rstrip('ab')", 'rstrip(" ab ab ", "ab")'),
        ("' ab ab '.rstrip('ba')", 'rstrip(" ab ab ", "ba")'),
        ("' ab ab '.rstrip()", 'rstrip(" ab ab ")'),
        ("' ab ab '.rstrip(' ')", 'rstrip(" ab ab ", " ")'),
        ("' ab ab '.rstrip('')", 'rstrip(" ab ab ", "")'),
        ("''.rstrip('a')", 'rstrip("", "a")'),
        ("'a'.rstrip('')", 'rstrip("a", "")'),
        ("''.rstrip('')", 'rstrip("", "")'),
    )),
    ('split() with sep', (
        ("'abc'.split('a')", 'split("abc", "a")'),
        ("'abc'.split('b')", 'split("abc", "b")'),
        ("'abc'.split('c')", 'split("abc", "c")'),
        ("'abc'.split('d')", 'split("abc", "d")'),
        ("'ab ab '.split('a')", 'split("ab ab ", "a")'),
        ("'ab ab '.split('b')", 'split("ab ab ", "b")'),
        ("'ab ab '.split('ab')", 'split("ab ab ", "ab")'),
        ("'ab ab '.split('ba')", 'split("ab ab ", "ba")'),
        ("'ab ab '.split('b a')", 'split("ab ab ", "b a")'),
        ("'aabb  aabb  '.split('a')", 'split("aabb  aabb  ", "a")'),
        ("'aabb  aabb  '.split('b')", 'split("aabb  aabb  ", "b")'),
        ("'aabb  aabb  '.split(' ')", 'split("aabb  aabb  ", " ")'),
        ("'aabb  aabb  '.split('b  a')", 'split("aabb  aabb  ", "b  a")'),
        ("' ab ab '.split(' ')", 'split(" ab ab ", " ")'),
        ("' ab ab '.split('')", 'split(" ab ab ", "")'),
        ("'a'.split('')", 'split("a", "")'),
        ("''.split('a')", 'split("", "a")'),
        ("''.split('')", 'split("", "")'),
        ("'abc'.split('a', 1)", 'split("abc", "a", 1)'),
        ("'abc'.split('b', 1)", 'split("abc", "b", 1)'),
        ("'abc'.split('c', 1)", 'split("abc", "c", 1)'),
        ("'abc'.split('d', 1)", 'split("abc", "d", 1)'),
        ("'ab ab '.split('a', 1)", 'split("ab ab ", "a", 1)'),
        ("'ab ab '.split('b', 1)", 'split("ab ab ", "b", 1)'),
        ("'ab ab '.split('ab', 1)", 'split("ab ab ", "ab", 1)'),
        ("'ab ab '.split('ba', 1)", 'split("ab ab ", "ba", 1)'),
        ("'ab ab '.split('b a', 1)", 'split("ab ab ", "b a", 1)'),
        ("'aabb  aabb  '.split('a', 1)", 'split("aabb  aabb  ", "a", 1)'),
        ("'aabb  aabb  '.split('b', 1)", 'split("aabb  aabb  ", "b", 1)'),
        ("'aabb  aabb  '.split(' ', 1)", 'split("aabb  aabb  ", " ", 1)'),
        ("'aabb  aabb  '.split('b  a', 1)",
         'split("aabb  aabb  ", "b  a", 1)'),
        ("' ab ab '.split(' ', 1)", 'split(" ab ab ", " ", 1)'),
        ("' ab ab '.split('', 1)", 'split(" ab ab ", "", 1)'),
        ("'a'.split('', 1)", 'split("a", "", 1)'),
        ("''.split('a', 1)", 'split("", "a", 1)'),
        ("''.split('', 1)", 'split("", "", 1)'),
        ("'abc'.split('a', 2)", 'split("abc", "a", 2)'),
        ("'abc'.split('b', 2)", 'split("abc", "b", 2)'),
        ("'abc'.split('c', 2)", 'split("abc", "c", 2)'),
        ("'abc'.split('d', 2)", 'split("abc", "d", 2)'),
        ("'ab ab '.split('a', 2)", 'split("ab ab ", "a", 2)'),
        ("'ab ab '.split('b', 2)", 'split("ab ab ", "b", 2)'),
        ("'ab ab '.split('ab', 2)", 'split("ab ab ", "ab", 2)'),
        ("'ab ab '.split('ba', 2)", 'split("ab ab ", "ba", 2)'),
        ("'ab ab '.split('b a', 2)", 'split("ab ab ", "b a", 2)'),
        ("'aabb  aabb  '.split('a', 2)", 'split("aabb  aabb  ", "a", 2)'),
        ("'aabb  aabb  '.split('b', 2)", 'split("aabb  aabb  ", "b", 2)'),
        ("'aabb  aabb  '.split(' ', 2)", 'split("aabb  aabb  ", " ", 2)'),
        ("'aabb  aabb  '.split('b  a', 2)",
         'split("aabb  aabb  ", "b  a", 2)'),
        ("' ab ab '.split(' ', 2)", 'split(" ab ab ", " ", 2)'),
        ("' ab ab '.split('', 2)", 'split(" ab ab ", "", 2)'),
        ("'a'.split('', 2)", 'split("a", "", 2)'),
        ("''.split('a', 2)", 'split("", "a", 2)'),
        ("''.split('', 2)", 'split("", "", 2)'),
        ("'abc'.split('b', 10)", 'split("abc", "b", 10)'),
        ("'abc'.split('b', 0)", 'split("abc", "b", 0)'),
        ("'abc'.split('b', -1)", 'split("abc", "b", -1)'),
        ("'abc'.split('b', -10000)", 'split("abc", "b", -10000)'),
    )),
    ('split() without sep', (
        ("'abc'.split()", 'split("abc")'),
        ("'ab ab '.split()", 'split("ab ab ")'),
        ("'aabb  aabb  '.split()", 'split("aabb  aabb  ")'),
        ("' ab ab '.split()", 'split(" ab ab ")'),
        ("'a'.split()", 'split("a")'),
        ("''.split()", 'split("")'),
        ("'abc'.split(None, 1)", 'split("abc", 1)'),
        ("'ab ab '.split(None, 1)", 'split("ab ab ", 1)'),
        ("'aabb  aabb  '.split(None, 1)", 'split("aabb  aabb  ", 1)'),
        ("' ab ab '.split(None, 1)", 'split(" ab ab ", 1)'),
        ("'a'.split(None, 1)", 'split("a", 1)'),
        ("''.split(None, 1)", 'split("", 1)'),
        ("'abc'.split(None, 2)", 'split("abc", 2)'),
        ("'ab ab '.split(None, 2)", 'split("ab ab ", 2)'),
        ("'aabb  aabb  '.split(None, 2)", 'split("aabb  aabb  ", 2)'),
        ("' ab ab '.split(None, 2)", 'split(" ab ab ", 2)'),
        ("'a'.split(None, 2)", 'split("a", 2)'),
        ("''.split(None, 2)", 'split("", 2)'),
        ("'abc'.split(None, 10)", 'split("abc", 10)'),
        ("'abc'.split(None, 0)", 'split("abc", 0)'),
        ("'abc'.split(None, -1)", 'split("abc", -1)'),
        ("'abc'.split(None, -10000)", 'split("abc", -10000)'),
    )),
    ('splitlines()', (
        ("'abc'.splitlines()", 'splitlines("abc")'),
        ("'a\\rbc'.splitlines()", 'splitlines("a\\rbc")'),
        ("'a\\nbc'.splitlines()", 'splitlines("a\\nbc")'),
        ("'a\\rb\\rc'.splitlines()", 'splitlines("a\\rb\\rc")'),
        ("'a\\nb\\nc'.splitlines()", 'splitlines("a\\nb\\nc")'),
        ("'a\\r\\nbc'.splitlines()", 'splitlines("a\\r\\nbc")'),
        ("'a\\n\\rbc'.splitlines()", 'splitlines("a\\n\\rbc")'),
        ("'\\r\\ra\\r\\nbc\\n'.splitlines()",
         'splitlines("\\r\\ra\\r\\nbc\\n")'),
        ("'\\n\\na\\r\\nbc\\r'.splitlines()",
         'splitlines("\\n\\na\\r\\nbc\\r")'),
        ("'\\r\\na\\r\\nbc\\r\\n'.splitlines()",
         'splitlines("\\r\\na\\r\\nbc\\r\\n")'),
        ("''.splitlines()", 'splitlines("")'),
        ("'abc'.splitlines(True)", 'splitlines("abc", true)'),
        ("'a\\rbc'.splitlines(True)", 'splitlines("a\\rbc", true)'),
        ("'a\\nbc'.splitlines(True)", 'splitlines("a\\nbc", true)'),
        ("'a\\r\\nbc'.splitlines(True)", 'splitlines("a\\r\\nbc", true)'),
        ("'a\\n\\rbc'.splitlines(True)", 'splitlines("a\\n\\rbc", true)'),
        ("'\\r\\ra\\r\\nbc\\n'.splitlines(True)",
         'splitlines("\\r\\ra\\r\\nbc\\n", true)'),
        ("'\\n\\na\\r\\nbc\\r'.splitlines(True)",
         'splitlines("\\n\\na\\r\\nbc\\r", true)'),
        ("'\\r\\na\\r\\nbc\\r\\n'.splitlines(True)",
         'splitlines("\\r\\na\\r\\nbc\\r\\n", true)'),
        ("''.splitlines(True)", 'splitlines("", true)'),
    )),
    ('startswith() with single prefix', (
        ("'a'.startswith('a')", 'startswith("a", "a")'),
        ("'abc'.startswith('a')", 'startswith("abc", "a")'),
        ("'abc'.startswith('c')", 'startswith("abc", "c")'),
        ("'abcab'.startswith('ab')", 'startswith("abcab", "ab")'),
        ("'abcab'.startswith('ac')", 'startswith("abcab", "ac")'),
        ("''.startswith('a')", 'startswith("", "a")'),
        ("'a'.startswith('')", 'startswith("a", "")'),
        ("''.startswith('')", 'startswith("", "")'),
        ("'abcab'.startswith('a', 1, 3)", 'startswith("abcab", "a", 1, 3)'),
        ("'abcab'.startswith('a', 1, 4)", 'startswith("abcab", "a", 1, 4)'),
        ("'abcab'.startswith('ab', 1, 3)", 'startswith("abcab", "ab", 1, 3)'),
        ("'abcab'.startswith('ab', 1, 4)", 'startswith("abcab", "ab", 1, 4)'),
        ("'abcab'.startswith('a', 1)", 'startswith("abcab", "a", 1)'),
        ("'abcab'.startswith('a', 4)", 'startswith("abcab", "a", 4)'),
        ("'abcab'.startswith('', 1, 3)", 'startswith("abcab", "", 1, 3)'),
        ("'abcab'.startswith('ab', 999)",
         'startswith("abcab", "ab", 999)'),
    )),
    ('startswith() with multiple prefixes', (
        ("'abc'.startswith(('a', 'b', 'c'))",
         'startswith("abc", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'acb'.startswith(('a', 'b', 'c'))",
         'startswith("acb", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'ddd'.startswith(('a', 'b', 'c'))",
         'startswith("ddd", (std::vector<std::string>{"a", "b", "c"}))'),
        ("'abc'.startswith(('ab', 'bc'))",
         'startswith("abc", (std::vector<std::string>{"ab", "bc"}))'),
        ("'acb'.startswith(('ab', 'bc'))",
         'startswith("acb", (std::vector<std::string>{"ab", "bc"}))'),
        ("'abc'.startswith(tuple())",
         'startswith("abc", (std::vector<std::string>{}))'),
    )),
    ('strip()', (
        ("'ab ab '.strip('a')", 'strip("ab ab ", "a")'),
        ("'ab ab '.strip('ab')", 'strip("ab ab ", "ab")'),
        ("'ab ab '.strip('ba')", 'strip("ab ab ", "ba")'),
        ("' ab ab'.strip('a')", 'strip(" ab ab", "a")'),
        ("' ab ab'.strip('ab')", 'strip(" ab ab", "ab")'),
        ("' ab ab'.strip('ba')", 'strip(" ab ab", "ba")'),
        ("' ab ab '.strip()", 'strip(" ab ab ")'),
        ("' ab ab '.strip(' ')", 'strip(" ab ab ", " ")'),
        ("' ab ab '.strip('')", 'strip(" ab ab ", "")'),
        ("''.strip('a')", 'strip("", "a")'),
        ("'a'.strip('')", 'strip("a", "")'),
        ("''.strip('')", 'strip("", "")'),
    )),
    ('swapcase()', (
        ("'a'.swapcase()", 'swapcase("a")'),
        ("'Ab'.swapcase()", 'swapcase("Ab")'),
        ("'abc'.swapcase()", 'swapcase("abc")'),
        ("'aBc'.swapcase()", 'swapcase("aBc")'),
        ("'a c'.swapcase()", 'swapcase("a c")'),
        ("'3'.swapcase()", 'swapcase("3")'),
        ("'3F'.swapcase()", 'swapcase("3F")'),
        ("''.swapcase()", 'swapcase("")'),
        ("'@'.swapcase()", 'swapcase("@")'),
        ("' '.swapcase()", 'swapcase(" ")'),
        ("'3F@'.swapcase()", 'swapcase("3F@")'),
        ("'\\n'.swapcase()", 'swapcase("\\n")'),
    )),
    ('title()', (
        ("'a'.title()", 'title("a")'),
        ("'aaa'.title()", 'title("aaa")'),
        ("'aAa'.title()", 'title("aAa")'),
        ("'Aaa'.title()", 'title("Aaa")'),
        ("'aAa AAA aaA'.title()", 'title("aAa AAA aaA")'),
        ("'AAa AAA AaA'.title()", 'title("AAa AAA AaA")'),
        ("'Aaa Bbb Ccc'.title()", 'title("Aaa Bbb Ccc")'),
        ("'aAa\\naaA'.title()", 'title("aAa\\naaA")'),
        ("'aAa0aaA'.title()", 'title("aAa0aaA")'),
        ("'aAa-aaA'.title()", 'title("aAa-aaA")'),
        ("'aAa/aaA'.title()", 'title("aAa/aaA")'),
        ("'aAa\\'aaA'.title()", 'title("aAa\'aaA")'),
        ("'AAa-AaA'.title()", 'title("AAa-AaA")'),
        ("'Aaa-Abc'.title()", 'title("Aaa-Abc")'),
        ("' aA a '.title()", 'title(" aA a ")'),
        ("''.title()", 'title("")'),
    )),
    ('upper()', (
        ("'a'.upper()", 'upper("a")'),
        ("'Ab'.upper()", 'upper("Ab")'),
        ("'abc'.upper()", 'upper("abc")'),
        ("'aBc'.upper()", 'upper("aBc")'),
        ("'a c'.upper()", 'upper("a c")'),
        ("'3'.upper()", 'upper("3")'),
        ("'3F'.upper()", 'upper("3F")'),
        ("''.upper()", 'upper("")'),
        ("'@'.upper()", 'upper("@")'),
        ("' '.upper()", 'upper(" ")'),
        ("'3F@'.upper()", 'upper("3F@")'),
        ("'\\n'.upper()", 'upper("\\n")'),
    )),
    ('zfill()', (
        ("'1'.zfill(5)", 'zfill("1", 5)'),
        ("'-1'.zfill(5)", 'zfill("-1", 5)'),
        ("'+1'.zfill(5)", 'zfill("+1", 5)'),
        ("'-'.zfill(5)", 'zfill("-", 5)'),
        ("'+'.zfill(5)", 'zfill("+", 5)'),
        ("'a'.zfill(5)", 'zfill("a", 5)'),
        ("'-a'.zfill(5)", 'zfill("-a", 5)'),
        ("'+a'.zfill(5)", 'zfill("+a", 5)'),
        ("'100'.zfill(5)", 'zfill("100", 5)'),
        ("'-100'.zfill(5)", 'zfill("-100", 5)'),
        ("'+100'.zfill(5)", 'zfill("+100", 5)'),
        ("'1000'.zfill(5)", 'zfill("1000", 5)'),
        ("'-1000'.zfill(5)", 'zfill("-1000", 5)'),
        ("'+1000'.zfill(5)", 'zfill("+1000", 5)'),
        ("'10000'.zfill(5)", 'zfill("10000", 5)'),
        ("'-10000'.zfill(5)", 'zfill("-10000", 5)'),
        ("'+10000'.zfill(5)", 'zfill("+10000", 5)'),
        ("'----'.zfill(5)", 'zfill("----", 5)'),
        ("'++++'.zfill(5)", 'zfill("++++", 5)'),
        ("'123'.zfill(0)", 'zfill("123", 0)'),
        ("'123'.zfill(-1)", 'zfill("123", -1)'),
        ("'123'.zfill(-100)", 'zfill("123", -100)'),
        ("''.zfill(5)", 'zfill("", 5)'),
        ("''.zfill(0)", 'zfill("", 0)'),
        ("''.zfill(-1)", 'zfill("", -1)'),
        ("''.zfill(-100)", 'zfill("", -100)'),
        ("'00'.zfill(5)", 'zfill("00", 5)'),
        ("'--00'.zfill(5)", 'zfill("--00", 5)'),
        ("'++00'.zfill(5)", 'zfill("++00", 5)'),
    )),
))


def create_case_header(name):
    """Create header."""
    return '\n'.join((
        '    CASE("{0}")'.format(name),
        '    {',
        '        using namespace ken3::pystr;',
        '',
    ))


def create_case_footer():
    """Create footer."""
    return '\n'.join((
        '    },',
        '',
    ))


def esc_and_quotation(src):
    """Do escape and add quotations."""
    return ''.join((
        '"',
        (src
         .replace('\\', '\\\\')
         .replace('"', '\\"')
         .replace('\n', '\\n')
         .replace('\r', '\\r')
         .replace('\t', '\\t')),
        '"'
    ))


def create_expect(test):
    """Create text of expected result."""
    try:
        ret = eval(test[0])

        if isinstance(ret, bool):
            ret = str(ret).lower()
        elif isinstance(ret, str):
            ret = 'std::string(' + esc_and_quotation(ret) + ')'
        elif (isinstance(ret, (list, tuple)) and
              all(isinstance(r, str) for r in ret)):
            ret = '(std::vector<std::string>{{{0}}})'.format(
                ', '.join(map(esc_and_quotation, ret))
            )
        return '        EXPECT({0} == {1});'.format(ret, test[1])
    except (IndexError, ValueError, TypeError) as ex:
        ret = 'ken3::py::' + ex.__class__.__name__
        return '        EXPECT_THROWS_AS({0}, {1});'.format(test[1], ret)


def create_source():
    """Create source file text."""
    # yield header
    yield """\
/**
 * @file    unittest/pystr_test.cpp
 * @brief   Testing ken3::pystr using lest.
 * @author  toda
 * @date    2016-06-29
 * @version 0.1.0
 * @remark  the target is C++11 or more
 * @note    This file is created by Python to get proper required results.
 *          Please, do not modify this file by manual.
 */

#include "ken3/pystr.hpp"
#include "unittest/lest.hpp"

namespace {

/**
 * @brief      helper function to create std::string, which is
 *             {0x00, 0x01, .., 0x0x7F}.
 * @param[in]  size: the size of createdstd::string. default is 128.
 * @return     created std::string.
 */
std::string str7F(size_t size=128)
{
    std::string s(size, '\\0');
    for (size_t i = 0; i < size; i++) {
        s[i] = static_cast<char>(i);
    }
    return s;
}
/////////////////////////////////////////////////////////////////////////////

} // namespace {

const lest::test specification[] =
{
"""

    # yield each test texts
    for name, tests in TEST_MAP.items():
        yield create_case_header(name)
        yield '\n'.join(create_expect(test) for test in tests)
        yield create_case_footer()

    # yield footer
    yield """\
};

int main(int argc, char* argv[])
{
    return lest::run(specification, argc, argv);
}
/////////////////////////////////////////////////////////////////////////////

"""


def main():
    """Create pystr_test.cpp file."""
    with open('pystr_test.cpp', 'w') as file:
        file.write('\n'.join(create_source()))


if __name__ == '__main__':
    main()
